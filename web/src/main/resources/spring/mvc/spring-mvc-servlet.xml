<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<description>
		<![CDATA[
			<!-- 开启controller注解支持 -->
		    <!-- 注意事项请参考：http://jinnianshilongnian.iteye.com/blog/1762632 -->
		    <context:component-scan base-package="com.msds.**.web.controller" use-default-filters="false">
		        <context:include-filter type="annotation"
		                                expression="org.springframework.stereotype.Controller"/>
		        <context:include-filter type="annotation"
		                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		    </context:component-scan>
		
		
		    <!-- 会自动注册了validator  ConversionService  -->
		    <mvc:annotation-driven
		            validator="validator"
		            conversion-service="conversionService"
		            content-negotiation-manager="contentNegotiationManager"
		            >
		
		        <mvc:message-converters register-defaults="true">
		            <!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
		            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
		                <constructor-arg value="UTF-8"/>
		                <property name = "supportedMediaTypes">
		                    <list>
		                        <bean class="org.springframework.http.MediaType">
		                            <constructor-arg index="0" value="text"/>
		                            <constructor-arg index="1" value="plain"/>
		                            <constructor-arg index="2" value="UTF-8"/>
		                        </bean>
		                        <bean class="org.springframework.http.MediaType">
		                            <constructor-arg index="0" value="*"/>
		                            <constructor-arg index="1" value="*"/>
		                            <constructor-arg index="2" value="UTF-8"/>
		                        </bean>
		                    </list>
		                </property>
		            </bean>
		
		            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
		            <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		                <property name="supportedMediaTypes">
		                    <list>
		                        <value>application/json;charset=UTF-8</value>
		                    </list>
		                </property>
		                <!--<property name="serializerFeature">-->
		                <!--这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等-->
		                <!--</property>-->
		            </bean>
		        </mvc:message-converters>
		
		    </mvc:annotation-driven>
		    
		    <!-- 文件上传相关 -->
		    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		        <!--one of the properties available;the maximum upload size in bytes 100M-->
		        <property name="maxUploadSize" value="104857600"/>
		        <property name="defaultEncoding" value="UTF-8"/>
		    </bean>
		    
		    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
		    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		        <property name="validationMessageSource" ref="messageSource"/>
		    </bean>
		]]>
	</description>
	
    <!-- 自动扫描的包名 -->  
    <!-- 注意事项请参考：http://jinnianshilongnian.iteye.com/blog/1762632 -->
    <context:component-scan base-package="com.msds.**.*.controller" use-default-filters="false">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    
    <!-- 默认的注解映射的支持 -->  
    <mvc:annotation-driven />  
      
    <!-- 视图解释类 -->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/views/jsp/"/>  
        <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />  
    </bean>  
      
    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/"/>

    <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <property name="favorPathExtension" value="true"/>
        <!-- 用于开启 /userinfo/123?format=json 的支持 -->
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        <!-- 是否忽略Accept Header -->
        <property name="ignoreAcceptHeader" value="false"/>

        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        <!-- 默认的content type -->
        <property name="defaultContentType" value="text/html"/>
    </bean>

</beans>